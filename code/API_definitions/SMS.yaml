openapi: 3.0.3
info:
  title: SMS API
  version: '0.10'
  description: >
    The API provides the customer with the ability to send SMS to the destination address(es). 
    There are 3 different categories of SMS i.e. Service, Promotional & Transactional. 
    This API is used to send all categories of messages. 
    Pre-requisite for using this API is that SMS Sender application / enterprise (or customer) needs to onboard itself with the access provider before using this API. 
    This API has only single operation i.e. Send SMS - Provides the capability to deliver SMS to the recepient. 
    In order to the receive delivery receipt separate API to be defined which is to be implemented by the API consumer for sending back the delivery receipt to the 'Send SMS' API consumer in a standardized callback API. 
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{apiRoot}/sms/v0'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
tags:
  - name: Short message
    description: API for treating SMS
paths:
  /sms/rid/{destinationAddress}/async:
     post:
      summary: sendSMS
      description: >
            
      parameters:
        - name: destinationAddress
          in: path
          description: Refers to the destination address.
          required: true
          schema:
            type: string
        - name: TransactionID
          schema:
            $ref: '#/components/schemas/DTransactionID'
          in: header
      requestBody:
        $ref: '#/components/requestBodies/SMSAsyncRequestBody'
      tags:
        - Short message
      responses:
        '200':
          $ref: '#/components/responses/SendSMSResponse'
        '400':
          $ref: '#/components/responses/SendSMSResponseError'
        '401':
          description: Unauthorized (no payload)
        '500':
          description: Internal server error (no payload)
        '503':
          $ref: '#/components/responses/GenericServerErrorResponse'
  /notify/sms/status:
    post:
      summary: notifySendSMSStatus
      description: >

      requestBody:
        $ref: '#/components/requestBodies/SendSMSStatusNotification'
      tags:
        - Short message
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
components:
  schemas:
    DApplicationResultCode:
      description: >-
        Representing result for the API call. For success case, \'0\' is set.
        Otherwise, a four digits code is set.
      type: string
      maxLength: 4
      example: '0'
    DTransactionID:
      description: >-
        An ID with a maximum of 36 chars strings that uniquely identify the
        transaction.
      type: string
      maxLength: 36
      example: 01234567-abcd-abcd-abcd-abce01234567
    DClientError:
      type: object
      required:
        - applicationResultCode
        - errorMessage
      properties:
        applicationResultCode:
          allOf:
            - $ref: '#/components/schemas/DApplicationResultCode'
            - example: 2001
        errorMessage:
          type: string
          description: Short message that explains the application result code.
          example: Resource not Found.
        transactionID:
          $ref: '#/components/schemas/DTransactionID'
    DDestinationAddress:
      description: Refers to the destination address.
      type: string
      example: '123456789012345'
    DCallBackURL:
      description: >-
        Specifies the destination URL to receive push to notifications about
        completed processes. When left blank, the notifications will be sent to
        a predefined URL.
      type: string
      format: uri
    DServiceRequestID:
      description: >-
        The Request ID that is issued per request. The Request ID consists of 24
        characters.
      example: SR0000012345678901234567
      maxLength: 24
      type: string
    DServiceRequestResult:
      enum:
        - Succeeded
        - Failed
      type: string
    DDateTimeRequested:
      description: >-
        The timestamp (UTC) when a request is sent.
      type: string
      format: date-time
    DDateTimeCompleted:
      description: >-
        The timestamp (UTC) when notified of the request completion.
      type: string
      format: date-time
    DMessageContext:
      description: >-
        When messageType is set as "GSM7bit", it is required to specify text up
        to a maximum number of 160 characters. When messageType is set as
        "Base64", it is required to specify binary data, which has been
        converted to Base64 character string, up to a maximum of 140 bytes.
      example: SMS Message
      type: string
    DMessageType:
      description: The Message schema.
      enum:
        - GSM7bit
        - Base64
      type: string
    DTTL:
      description: >
        TTL(Time to Live) means the SMS valid period in SMSC. 
      type: integer
      example: 1
    DDeliveryStatus:
      enum:
        - Succeeded
        - Failed
      type: string
    DDeliveryFailureCause:
      description: This field is set only when `deliveryStaus` is `Failed`.
      enum:
        - PlatformNotSupported
        - SMSFormatError
        - SIMNotActive
        - TTLExpire
        - NoPlatformResponse
        - Unknown
      type: string
  requestBodies:
    SMSAsyncRequestBody:
      description: Message body.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - messageType
            properties:
              message:
                $ref: '#/components/schemas/DMessageContext'
              messageType:
                $ref: '#/components/schemas/DMessageType'
              TTL:
                $ref: '#/components/schemas/DTTL'
              callBackURL:
                $ref: '#/components/schemas/DCallBackURL'
    SendSMSStatusNotification:
      description: Send SMS status notification
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - serviceRequestID
              - destinationAddress
              - deliveryStatus
              - deliveryStatusDetailInfo
            properties:
              serviceRequestID:
                $ref: '#/components/schemas/DServiceRequestID'
              destinationAddress:
                $ref: '#/components/schemas/DDestinationAddress'
              transactionID:
                $ref: '#/components/schemas/DTransactionID'
              deliveryStatus:
                $ref: '#/components/schemas/DDeliveryStatus'
              cause:
                $ref: '#/components/schemas/DDeliveryFailureCause'
              dateTimeRequested:
                $ref: '#/components/schemas/DDateTimeRequested'
              dateTimeCompleted:
                $ref: '#/components/schemas/DDateTimeCompleted'
  responses:
    GenericServerErrorResponse:
      description: Server side error.
      content:
        application/json:
          schema:
            type: object
            required:
              - applicationResultCode
              - errorMessage
            properties:
              applicationResultCode:
                allOf:
                  - $ref: '#/components/schemas/DApplicationResultCode'
                  - example: 1003
              errorMessage:
                type: string
                description: Short message that explains the application result code.
                example: Concurrent requests limit exceeded. (USERS)
              transactionID:
                $ref: '#/components/schemas/DTransactionID'
    SendSMSResponse:
      description: Request accepted
      content:
        application/json:
          schema:
            type: object
            required:
              - applicationResultCode
              - destinationAddress
              - serviceRequestID
            properties:
              serviceRequestID:
                $ref: '#/components/schemas/DServiceRequestID'
              destinationAddress:
                $ref: '#/components/schemas/DDestinationAddress'
              applicationResultCode:
                $ref: '#/components/schemas/DApplicationResultCode'
              transactionID:
                $ref: '#/components/schemas/DTransactionID'
    SendSMSResponseError:
      description: |
        * <u>*2001 Resource not Found.*</u>
        * <u>*2002 Invalid destination address.*</u>
        * <u>*2014 Invalid Message Context.*</u>
        * <u>*2015 Invalid Message Type.*</u>
        * <u>*2016 Message too long.*</u>
        * <u>*2027 Invalid callback URL.*</u>
        * <u>*2059 Inactive destination.*</u>
        * <u>*2089 Invalid TTL.*</u>
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DClientError'
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
